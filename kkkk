import QtQuick 2.15
import QtQuick.Controls 2.15
import QtLocation 5.15
import QtPositioning 5.15

ApplicationWindow {
    visible: true
    width: 800
    height: 600

    RowLayout {
        anchors.fill: parent

        // Left pane for displaying photos
        Rectangle {
            Layout.fillWidth: true
            Layout.preferredWidth: parent.width / 2
            color: "lightgray"
            id: leftPane

            // Container for photos
            Column {
                id: photoContainer
                anchors.fill: parent
                spacing: 10
            }
        }

        // Right pane for displaying the map
        Rectangle {
            Layout.fillWidth: true
            Layout.preferredWidth: parent.width / 2
            color: "white"
            id: rightPane

            Map {
                id: map
                anchors.fill: parent
                plugin: Plugin {
                    name: "osm"
                }
                center: QtPositioning.coordinate(59.9483, 10.7695) // Example coordinates
                zoomLevel: 14

                // Red marker for user location
                MapQuickItem {
                    coordinate: map.center
                    anchorPoint.x: marker.width / 2
                    anchorPoint.y: marker.height
                    sourceItem: Image {
                        id: marker
                        source: "qrc:/images/red_marker.png"
                    }
                }

                // Example geolocated photo thumbnails
                MapQuickItem {
                    coordinate: QtPositioning.coordinate(59.9493, 10.7695)
                    anchorPoint.x: thumbnail.width / 2
                    anchorPoint.y: thumbnail.height
                    sourceItem: Image {
                        id: thumbnail
                        source: "qrc:/images/photo_thumbnail.png"
                        width: 50
                        height: 50
                    }
                }

                // Event handlers for map interactions
                onCenterChanged: updatePhotos()
                onZoomLevelChanged: updatePhotos()
                onBearingChanged: updatePhotos()
            }
        }
    }

    function updatePhotos() {
        // Clear existing photos
        photoContainer.children.forEach(child => child.destroy())

        // Add photos based on current map state
        // This is a placeholder implementation
        // You need to implement the logic to select and arrange photos based on geolocation and orientation
        for (let i = 0; i < 5; i++) {
            photoContainer.addItem(Image {
                source: "qrc:/images/photo_thumbnail.png"
                width: 100
                height: 100
            })
        }
    }
}